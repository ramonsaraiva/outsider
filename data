namespace Outsider.Behaviours {
        public class Human : Player {
                #region UnityFields
                [SerializeField]
                private NavMeshAgent navMeshAgent;
                [SerializeField]
                private EquipmentSlot equipmentSlot;
                [SerializeField]
                private GlowPlaneAngleFade glow;
                [SerializeField]
                private Renderer meshRenderer;
                [SerializeField]
                private GameObject lantern;
                #endregion UnityFields
 
                #region Fields
                private int stamina;
                private NetworkDelay staminaRecoverDelay;
 
                private int oxygen;
                private NetworkDelay oxygenDelay;
                private NetworkDelay staminaOxygenConsumeDelay;
                private NetworkDelay lanternConsumeDelay;
 
                private OutsiderLarva larva;
 
                private Color glowColor;
                #endregion Fields
 
                #region Properties
                new public HumanAttributes Attributes {
                        get {
                                return (HumanAttributes)attributes;
                        }
                }
 
                public Color GlowColor {
                        get {
                                return glowColor;
                        }
                        set {
 
                        }
                }
 
                public EquipmentSlot EquipmentSlot {
                        get {
                                return equipmentSlot;
                        }
                }
 
                public MaterialType FootstepMaterial {  //TODO: Remove this property?
                        get;
                        set;
                }
 
                virtual public int Stamina {
                        get {
                                return stamina;
                        }
                        set {
 
                        }
                }
 
                virtual public int Oxygen {
                        get {
                                return oxygen;
                        }
                        set {
 
                        }
                }
 
                public bool IsFiringPrimary {
                        get;
                        set;
                }
 
                public bool IsFiringSecondary {
                        get;
                        set;
                }
 
                public bool IsInteracting {
                        get;
                        protected set;
                }
 
                public bool IsUsingItem {
                        get;
                        set;
                }
 
                virtual public bool IsWalking {
                        get;
                        protected set;
                }
 
                virtual public bool IsSprinting {
                        get;
                        protected set;
                }
 
                override public bool IsDead {
                        set {
                                //caraiada de coisa
                        }
                }
 
                public bool IsInfected {
                        get {
                                return (larva != null);
                        }
                }
 
                public bool Lantern {
                        get {
                                return lantern.activeInHierarchy;
                        }
                        set {
                                if (Lantern != value) {
                                        lantern.SetActive(value);
                                }
                        }
                }
                #endregion Properties
